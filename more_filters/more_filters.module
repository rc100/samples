<?php

/**
 * @file
 * Contains more_filters.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function more_filters_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the more_filters module.
    case 'help.page.more_filters':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('A collection of useful Filter plugins:') . '</p>';
      $output .= '<ul>';
      $output .= '<li>' . t('Ordinals Filter - Wraps ordinals (nd/st/th/rd) in &lt;span&gt; tags, so they can be superscripted with css.') . '</li>';
      $output .= '<li>' . t('Phone Format Filter - Converts phone numbers in 555.222.1111 format to (555) 222-1111 format.') . '</li>';
      $output .= '</ul>';
      return $output;

    default:
  }
}

/**
 * @defgroup more_filters More filters
 * @{
 * Filters implemented by the More Filters module.
 */

/**
 * Wraps ordinal text (nd / st / th / rd) with <span class="ordinal"></span>.
 *
 * @param string $text
 *   The text to apply the filter to.
 * @param object $filter
 *   The Filter object.
 *
 * @return string
 *   The processed text with filter applied.
 */
function _filter_ordinals($text, $filter) {
  // The filter callback to call for each matching item.
  $task = '_filter_ordinals_parse_matches';
  // The regex pattern for finding ordinals (case-insensitive). Ordinals must
  // be preceded by one or more numbers and immediately followed by a
  // non-alphanumeric character.
  $pattern = "/([0-9]+)(nd|st|th|rd)([^a-zA-Z0-9]+)/i";

  // Apply filter to text.
  $text = _filter_text_only($text, $filter, $task, $pattern);

  // @todo
  // Add support for settings: tags to ignore / class name to use in <span>.
  // Also, add handling for HTML comments (as seen in _filter_url()).
  return $text;
}

/**
 * Converts phone numbers in 555.222.1111 format to (555) 222-1111 format.
 *
 * @param string $text
 *   The text to apply the filter to.
 * @param object $filter
 *   The Filter object.
 *
 * @return string
 *   The processed text with filter applied.
 */
function _filter_phone_format($text, $filter) {
  // The filter callback to call for each matching item.
  $task = '_filter_phone_format_parse_matches';
  // The regex pattern for finding phone numbers with format: 555.222.1111.
  $pattern = "/([0-9]{3})\s*\.\s*([0-9]{3})\s*\.\s*([0-9]{4})/";

  // Apply filter to text.
  $text = _filter_text_only($text, $filter, $task, $pattern);

  // @todo
  // Add support for setting that performs the reverse conversion.
  return $text;
}

/**
 * A generic text replacement fn that only operates on non-html text nodes.
 *
 * The text-chunk-only iterator used in this function is adapted from the
 * _filter_url() function (in the core Filter module).
 *
 * @param string $text
 *   The text to apply the filter to.
 * @param object $filter
 *   The Filter object.
 * @param string $task
 *   The callback function to use for filtering text.
 * @param string $pattern
 *   The regex pattern to use for filtering text.
 * @param array $ignore_tags
 *   An array of tags to skip and not recurse into.
 *
 * @return string
 *   The processed text with filter applied.
 */
function _filter_text_only($text, $filter, $task, $pattern, $ignore_tags = array()) {
  // Statically cache filter settings in callback fn with dummy call.
  $task(NULL, $filter->settings);
  // Revert to default $ignore_tags, if none provided.
  if (empty($ignore_tags)) {
    $ignore_tags = 'a|script|style|code|pre';
  }
  // Split at all tags; ensures that no tags or attributes are processed.
  $chunks = preg_split('/(<.+?>)/is', $text, -1, PREG_SPLIT_DELIM_CAPTURE);
  // PHP ensures that the array consists of alternating delimiters and
  // literals, and begins and ends with a literal (inserting NULL as
  // required). Therefore, the first chunk is always text:
  $chunk_type = 'text';
  // If a tag of $ignore_tags is found, it is stored in $open_tag and only
  // removed when the closing tag is found. Until the closing tag is found,
  // no replacements are made.
  $open_tag = '';

  for ($i = 0; $i < count($chunks); $i++) {
    if ($chunk_type == 'text') {
      // Only process this text if there are no unclosed $ignore_tags.
      if ($open_tag == '') {
        // If there is a match, process this chunk via the callback
        // function contained in $task.
        $chunks[$i] = preg_replace_callback($pattern, $task, $chunks[$i]);
      }
      // Text chunk is done, so next chunk must be a tag.
      $chunk_type = 'tag';
    }
    else {
      // Only process this tag if there are no unclosed $ignore_tags.
      if ($open_tag == '') {
        // Check whether this tag is contained in $ignore_tags.
        if (preg_match("/<($ignore_tags)(?:\s|>)/i", $chunks[$i], $matches)) {
          $open_tag = $matches[1];
        }
      }
      // Otherwise, check whether this is the closing tag for $open_tag.
      else {
        if (preg_match("/<\/$open_tag>/i", $chunks[$i], $matches)) {
          $open_tag = '';
        }
      }
      // Tag chunk is done, so next chunk must be text.
      $chunk_type = 'text';
    }
  }

  // Re-assemble the chunks for output.
  $text = implode($chunks);

  return $text;
}

/**
 * Adds the <span class="ordinal"> wrapper around a matched ordinal.
 *
 * Callback for preg_replace_callback() within _filter_text_only().
 */
function _filter_ordinals_parse_matches($match, $filter_settings = NULL) {
  // Allow the filter's form settings to be passed into this callback fn and
  // statically cached by initializing it prior to preg_replace_callback()
  // (for this dummy call, set $match = NULL)
  static $settings;

  if ($filter_settings !== NULL) {
    $settings = $filter_settings;
  }

  // Get relevant settings.
  if (isset($settings) && isset($settings['more_filters_ordinals_tag_default'])) {
    $settings_use_sup_tag = $settings['more_filters_ordinals_tag_default'];
  }
  else {
    $settings_use_sup_tag = FALSE;
  }

  // Process the matched ordinal.
  if (!empty($match)) {
    // Set tag and tag class to wrap ordinal with (based on settings form).
    $ordinal_tag = $settings_use_sup_tag ? 'sup' : 'span';
    $ordinal_class = "ordinal";
    $ordinal_class_txt = ' class="' . $ordinal_class . '"';
    // Do not add ordinal class when using <sup> tags.
    if ($ordinal_tag == 'sup') {
      $ordinal_class_txt = '';
    }
    // Define position of each capture group in the regexp.
    $numerics = 1;
    $ordinal = 2;
    $trailing_chars = 3;
    // Build up wrapped ordinal for output.
    $output = $match[$numerics];
    $output .= '<' . $ordinal_tag . $ordinal_class_txt . '>';
    $output .= $match[$ordinal];
    $output .= '</' . $ordinal_tag . '>' . $match[$trailing_chars];
  }
  else {
    $output = '';
  }
  return $output;
}

/**
 * Returns a matched phone number in this format: (555) 222-1111.
 *
 * Callback for preg_replace_callback() within _filter_text_only().
 */
function _filter_phone_format_parse_matches($match, $filter_settings = NULL) {
  // Process the matched phone number.
  if (!empty($match)) {
    // Define position of each capture group in the regexp.
    $area_code = 1;
    $prefix_3digit = 2;
    $suffix_4digit = 3;
    // Re-format phone number.
    $output = '(' . $match[$area_code] . ') ' . $match[$prefix_3digit] . '-' . $match[$suffix_4digit];
  }
  else {
    $output = '';
  }
  return $output;
}

/**
 * @} End of "defgroup more_filters".
 */
